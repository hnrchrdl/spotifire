/* eslint-disable camelcase */
const sampleSize = require("lodash/sampleSize");

// playlists are identified with their key.
// must have a name, a description and a function named spotifire.
// sporifire takes in the request, with the user property as the spotify user.
// spotifre must return a list of spotify tracks.

module.exports = {
  daily: {
    name: "Spotifire daily",
    description:
      "By subscribing, you get a fresh new playlist everyday. It contains 50 tracks and is based on your recent listening activity. Automatic updates occur every night at 3AM (Berlin time).",
    image:
      "",
    imageType: "image/jpeg",
    spotifire(spotifyConnection) {
      return new Promise(async (resolve, reject) => {
        const {
          body: { items: topArtists }
        } = await spotifyConnection
          .getMyTopArtists({
            limit: 50,
            time_range: "short_term"
          })
          .catch(e => {
            reject(e);
          });
        const randomArtists = sampleSize(topArtists, 5);
        const seed_artists = randomArtists.map(artist => artist.id);
        const {
          body: { tracks }
        } = await spotifyConnection
          .getRecommendations({ seed_artists, limit: 50 })
          .catch(e => {
            reject(e);
          });
        resolve(tracks);
      });
    }
  },
  weekly: {
    name: "Spotifire weekly",
    description:
      "By subscribing, you will get a playlist that will get updates once a week. It contains 50 tracks and is based on your long term listening activity. Automatic updates occur every monday morning (Berlin time).",
    image:
      "",
    imageType: "image/jpeg",
    spotifire(spotifyConnection) {
      return new Promise(async (resolve, reject) => {
        const {
          body: { items: topArtists }
        } = await spotifyConnection
          .getMyTopArtists({
            limit: 50,
            time_range: "long_term"
          })
          .catch(e => {
            reject(e);
          });
        const randomArtists = sampleSize(topArtists, 5);
        const seed_artists = randomArtists.map(artist => artist.id);
        const {
          body: { tracks }
        } = await spotifyConnection
          .getRecommendations({ seed_artists, limit: 50 })
          .catch(e => {
            reject(e);
          });
        resolve(tracks);
      });
    }
  }
};
